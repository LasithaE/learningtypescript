generator client {
  provider="prisma-client-js"
  previewFeatures=["aggregateApi"] 
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://prisma:prisma@127.0.0.1:5432/grading-app" 
}
// TODO: define fields and relations //wp db clean --yes
model User {
  id          Int                @id @default(autoincrement())
  email       String             @unique
  firstName   String?
  lastName    String?
  social      Json?
  //relation fields
  courses     CourseEnrollment[]
  testResults TestResult[]       @relation(name: "results")
  testGraded  TestResult[]       @relation(name: "graded")
  tokens Token[]
  isAdmin   Boolean @default(false)
}
model Token {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type TokenType 
  emailToken String? @unique //only for short lived tokens
  valid Boolean @default(true)
  expiration DateTime
  //Relation fields
  user User @relation(fields: [userId],references:[id])
  userId Int
}
   // Relation fields   courses     CourseEnrollment[]   testResults TestResult[]       @relation(name: "results")   testsGraded TestResult[]       @relation(name: "graded")+  tokens      Token[] }+ +model Token {+  id         Int       @id @default(autoincrement())+  createdAt  DateTime  @default(now())+  updatedAt  DateTime  @updatedAt+  type       TokenType+  emailToken String?   @unique // Only used for short lived email tokens+  valid      Boolean   @default(true)+  expiration DateTime+ +  // Relation fields+  user   User @relation(fields: [userId], references: [id])+  userId Int+}
enum TokenType { // used as a short-lived token sent to the user's email+  API
  EMAIL 
  API 
}

// TODO: define fields and relations
model Course {
  id   Int    @id @default(autoincrement())
  name String

  courseDetails String?
  //relation fields
  members       CourseEnrollment[]
  tests         Test[]

}

//implicit relations (models just point to each other [here, User and Course models]) and explicit (models just point to their relational databases [here, the CourseEnrollment model])
model CourseEnrollment { //explicit relational table
  createdAt DateTime @default(now())
  role      UserRole
  //relational fields
  courseId  Int 
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@id([userId, courseId]) 
  @@index([userId, role]) 
}

// TODO: define fields and relations
model Test {
  id          Int          @id @default(autoincrement())
  updatedAt   DateTime     @updatedAt
  name        String
  date        DateTime
  //Relational fields
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
  testResults TestResult[]
}

// TODO: define fields and relations
model TestResult { //many side of the one to many relation eg: 1 test can have many test results
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  result    Int //Percentage precise to one decimal point represented as result
  testId    Int //relation scalar field
  test      Test     @relation(fields: [testId], references: [id])
  studentId Int

  student  User @relation(name: "results", fields: [studentId], references: [id]) //relation field
  graderId Int

  gradedBy User @relation(name: "graded", fields: [graderId], references: [id]) //here we have two relational fields for the same model, for that we have to disambiguate that by using name field and also have the relational mention on the other side
}

enum UserRole {
  STUDENT
  TEACHER
}
